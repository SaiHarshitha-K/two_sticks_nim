{"version":3,"sources":["Game.js","App.js","reportWebVitals.js","index.js"],"names":["COMPUTER","HUMAN","minMax","state","alpha","beta","maximizingPlayer","maxEval","Infinity","move","score","Math","max","minEval","min","App","totalCoins","setTotalCoins","useState","coins","setCoins","computerCoins","setComputerCoins","humanCoins","setHumanCoins","currentPlayer","setCurrentPlayer","message","setMessage","gameOver","setGameOver","computerMoves","setComputerMoves","humanMoves","setHumanMoves","isGameStarted","setIsGameStarted","showInstructions","setShowInstructions","takeCoins","num","remainingCoins","handleComputerMove","bestMove","filter","movesCreated","moveByComputer","useEffect","setTimeout","handleHumanMove","React","createElement","className","style","backgroundColor","position","top","right","fontSize","color","cursor","onClick","type","value","onChange","e","parseInt","target","handleStartGame","alert","Fragment","marginTop","repeat","display","window","location","reload","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9aebe291.chunk.js","sourcesContent":["export const COMPUTER = \"computer\";\r\nexport const HUMAN = \"human\";\r\n\r\n// Minimax algorithm with alpha-beta pruning\r\nfunction minMax(state, alpha, beta, maximizingPlayer) {\r\n  if (state === 1) {\r\n    return maximizingPlayer ? -1 : 1;\r\n  }\r\n\r\n  if (maximizingPlayer) {\r\n    let maxEval = -Infinity;\r\n    for (let move of [1, 2]) {\r\n      if (state - move > 0) {\r\n        const score = minMax(state - move, alpha, beta, false); // Changed 'eval' to 'score'\r\n        maxEval = Math.max(maxEval, score);\r\n        alpha = Math.max(alpha, score);\r\n        if (beta <= alpha) break;\r\n      }\r\n    }\r\n    return maxEval;\r\n  } else {\r\n    let minEval = Infinity;\r\n    for (let move of [1, 2]) {\r\n      if (state - move > 0) {\r\n        const score = minMax(state - move, alpha, beta, true); // Changed 'eval' to 'score'\r\n        minEval = Math.min(minEval, score);\r\n        beta = Math.min(beta, score);\r\n        if (beta <= alpha) break;\r\n      }\r\n    }\r\n    return minEval;\r\n  }\r\n}\r\n\r\n// Helper function to generate valid moves\r\nfunction movesCreated(state) {\r\n  return [1, 2].filter(move => state - move > 0);\r\n}\r\n\r\n// Computer's strategy for choosing the optimal move\r\nexport function moveByComputer(state) {\r\n  let bestMove = null;\r\n  let maxEval = -Infinity;\r\n  for (let move of movesCreated(state)) {\r\n    const newState = state - move;\r\n    const score = minMax(newState, -Infinity, Infinity, false);\r\n    if (score > maxEval) {\r\n      maxEval = score;\r\n      bestMove = move;\r\n    }\r\n  }\r\n  return bestMove;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport './App.css';\r\nimport { COMPUTER, HUMAN, moveByComputer } from './Game';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n  const [totalCoins, setTotalCoins] = useState(10);\r\n  const [coins, setCoins] = useState(10);\r\n  const [computerCoins, setComputerCoins] = useState(0);\r\n  const [humanCoins, setHumanCoins] = useState(0);\r\n  const [currentPlayer, setCurrentPlayer] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [computerMoves, setComputerMoves] = useState('');\r\n  const [humanMoves, setHumanMoves] = useState('');\r\n  const [isGameStarted, setIsGameStarted] = useState(false);\r\n  const [showInstructions, setShowInstructions] = useState(false);\r\n\r\n  const handleStartGame = () => {\r\n    if (!currentPlayer) {\r\n      alert('Please select who will go first.');\r\n      return;\r\n    }\r\n    setCoins(totalCoins);\r\n    setComputerCoins(0);\r\n    setHumanCoins(0);\r\n    setIsGameStarted(true);\r\n  };\r\n\r\n  const takeCoins = (num) => {\r\n    const remainingCoins = coins - num;\r\n\r\n    if (currentPlayer === COMPUTER) {\r\n      setComputerCoins(computerCoins + num);\r\n    } else {\r\n      setHumanCoins(humanCoins + num);\r\n    }\r\n\r\n    if (remainingCoins === 1) {\r\n      setCoins(remainingCoins);\r\n      setGameOver(true);\r\n      const winner = currentPlayer === HUMAN ? HUMAN : COMPUTER;\r\n      setMessage(`${winner} wins by leaving one coin!`);\r\n    } else if (remainingCoins <= 0) {\r\n      setCoins(remainingCoins);\r\n      setGameOver(true);\r\n      const winner = currentPlayer === HUMAN ? COMPUTER : HUMAN;\r\n      setMessage(`${winner} wins by avoiding the last coin!`);\r\n    } else {\r\n      setCoins(remainingCoins);\r\n      setCurrentPlayer(currentPlayer === COMPUTER ? HUMAN : COMPUTER);\r\n    }\r\n  };\r\n\r\n  const handleComputerMove = () => {\r\n    const move = moveByComputer(coins);\r\n    setComputerMoves(`Computer took ${move} coin${move > 1 ? 's' : ''}. Coins remaining after computer's move: ${coins - move}`);\r\n    setHumanMoves('');\r\n    takeCoins(move);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentPlayer === COMPUTER && !gameOver && isGameStarted) {\r\n      setTimeout(() => {\r\n        handleComputerMove();\r\n      }, 1000);\r\n    }\r\n  }, [currentPlayer, gameOver, isGameStarted]);\r\n\r\n  const handleHumanMove = (num) => {\r\n    setHumanMoves(`You took ${num} coin${num > 1 ? 's' : ''}. Coins remaining after your move: ${coins - num}`);\r\n    setComputerMoves('');\r\n    takeCoins(num);\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center align-items-center vh-100\" style={{ backgroundColor: '#edf1fc' }}>\r\n      <div className=\"text-center\">\r\n        {/* Adjusted Question Mark Icon */}\r\n        <div style={{ position: 'absolute', top: 100, right: 100 }}>\r\n          <i\r\n            className=\"fas fa-question-circle\"\r\n            style={{ fontSize: '2rem', color: '#333', cursor: 'pointer' }}\r\n            onClick={() => setShowInstructions(true)}\r\n          />\r\n        </div>\r\n        \r\n        <h1 className=\"display-4 mb-3\">Two-Stick Nim Game</h1>\r\n  \r\n        {!isGameStarted && (\r\n          <div>\r\n            <label>Select who goes first:</label>\r\n            <div>\r\n              <button\r\n                className={`btn ${currentPlayer === HUMAN ? 'btn-secondary' : 'btn-light'} m-2`}\r\n                onClick={() => setCurrentPlayer(HUMAN)}\r\n              >\r\n                Human\r\n              </button>\r\n              <button\r\n                className={`btn ${currentPlayer === COMPUTER ? 'btn-secondary' : 'btn-light'} m-2`}\r\n                onClick={() => setCurrentPlayer(COMPUTER)}\r\n              >\r\n                Computer\r\n              </button>\r\n            </div>\r\n            <label>Enter the number of coins:</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control w-25 mx-auto\"\r\n              value={totalCoins}\r\n              onChange={(e) => setTotalCoins(parseInt(e.target.value))}\r\n              min=\"1\"\r\n            />\r\n            <button className=\"btn btn-primary m-3\" onClick={handleStartGame}>\r\n              Start Game\r\n            </button>\r\n          </div>\r\n        )}\r\n  \r\n        {isGameStarted && (\r\n          <>\r\n            <div className=\"row mt-4\">\r\n              <div className=\"col-4 text-center\">\r\n                <i className=\"fas fa-robot\" style={{ fontSize: '3rem' }}></i>\r\n                {computerMoves && (\r\n                  <p className=\"alert alert-info\" style={{ backgroundColor: '#fff', color: '#000', marginTop: '10px' }}>\r\n                    {computerMoves}\r\n                  </p>\r\n                )}\r\n                <div className=\"coin-stack\">{'🪙'.repeat(computerCoins)}</div>\r\n              </div>\r\n  \r\n              <div className=\"col-4 text-center\">\r\n                <div>\r\n                  <span style={{ fontSize: '2rem', display: 'block' }}>{'🪙'.repeat(coins)}</span>\r\n                  <p>Coins remaining: {coins}</p>\r\n                </div>\r\n                <div>\r\n                  {message && (\r\n                    <p className={`alert ${gameOver ? 'alert-success' : 'alert-info'}`} style={{ marginTop: '20px' }}>\r\n                      {message}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n  \r\n              <div className=\"col-4 text-center\">\r\n                <i className=\"fas fa-user\" style={{ fontSize: '3rem' }}></i>\r\n                {humanMoves && (\r\n                  <p className=\"alert alert-info\" style={{ backgroundColor: '#fff', color: '#000', marginTop: '10px' }}>\r\n                    {humanMoves}\r\n                  </p>\r\n                )}\r\n                <div className=\"coin-stack\">{'🪙'.repeat(humanCoins)}</div>\r\n              </div>\r\n            </div>\r\n  \r\n            {!gameOver && currentPlayer === HUMAN && (\r\n              <div className=\"mt-3\">\r\n                <button className=\"btn btn-dark m-2\" onClick={() => handleHumanMove(1)}>\r\n                  Take 1 Coin\r\n                </button>\r\n                <button className=\"btn btn-dark m-2\" onClick={() => handleHumanMove(2)}>\r\n                  Take 2 Coins\r\n                </button>\r\n              </div>\r\n            )}\r\n  \r\n            {gameOver && (\r\n              <button className=\"btn btn-success mt-3\" onClick={() => window.location.reload()}>\r\n                Play Again\r\n              </button>\r\n            )}\r\n          </>\r\n        )}\r\n  \r\n        <Modal show={showInstructions} onHide={() => setShowInstructions(false)}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Game Instructions</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p>\r\n              Welcome to the Two-Stick Nim Game! Here’s how it works:\r\n              <br />\r\n              - The game starts with a selected number of coins.\r\n              <br />\r\n              - Players take turns removing 1 or 2 coins from the pile.\r\n              <br />\r\n              - The player who takes the last coin loses!\r\n            </p>\r\n            <p>Good luck and have fun!</p>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={() => setShowInstructions(false)}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}